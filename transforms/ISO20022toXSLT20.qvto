/**
 * Copyright (c) 2015, 2016 Denis Nikiforov.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Denis Nikiforov - initial API and implementation
 */

import ISO20022Helpers;
import OCLtoXPath;
import DocOCL;

modeltype UML uses 'http://www.eclipse.org/uml2/2.1.0/UML';
modeltype OCL 'strict' uses 'http://www.eclipse.org/ocl/2015/Pivot';
modeltype XSLT uses 'http://www.w3.org/1999/XSL/Transform';
modeltype XPATH2 'strict' uses 'http://www.emftext.org/language/xpath2';
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype TYPE uses 'http://www.eclipse.org/emf/2003/XMLType';

transformation ISO20022toXSLT20(in m : UML, out x : XSLT);

configuration property terminateOnException : Boolean;
configuration property noNamespace : Boolean;
configuration property generateXMLresult : Boolean;
configuration property generateHTMLresult : Boolean;
configuration property fileName : String;

main()
{
    if (terminateOnException.oclIsUndefined()) {
        terminateOnException := false;
    };
    if (noNamespace.oclIsUndefined()) {
        noNamespace := false;
    };
    if (generateXMLresult.oclIsUndefined()) {
        generateXMLresult := true;
    };
    if (generateHTMLresult.oclIsUndefined()) {
        generateHTMLresult := true;
    };
    if (fileName.oclIsUndefined()) {
        if (generateXMLresult) {
            m.objectsOfKind(Classifier)->select(is('MessageDefinition'))->toStylesheet();
        };
        if (generateHTMLresult) {
            m.objectsOfKind(Classifier)->select(is('MessageDefinition'))->toStylesheetForHTML();
        };
    }
    else {
        assert fatal (m.objectsOfKind(Classifier)->one(is('MessageDefinition')))
            with log('fileName parameter was specified so exactly one MessageDefinition is expected. Found: ' +
                m.objectsOfKind(Classifier)->select(is('MessageDefinition'))->size().toString());
        if (generateXMLresult) {
            m.objectsOfKind(Classifier)->any(is('MessageDefinition'))->toStylesheet(fileName);
        };
        if (generateHTMLresult) {
            m.objectsOfKind(Classifier)->any(is('MessageDefinition'))->toStylesheetForHTML(fileName);
        };
    }
}

mapping Classifier::toStylesheet() : DocumentRoot
{
    init {
        var msgId := self.getValue(profileName + '::MessageDefinition', 'messageDefinitionIdentifier');
        result := self.xmap toStylesheet(msgId);
    }
}

mapping Classifier::toStylesheet(fileName : String) : DocumentRoot
{
    var msgId := self.getValue(profileName + '::MessageDefinition', 'messageDefinitionIdentifier');
    var namespace := 'urn:iso:std:iso:20022:tech:xsd:' + msgId.replaceAll('-.*$', '');

    log('  Found message ' + msgId);

    var stylesheetObj := object TransformType {
        id := fileName;
        version := 2;
        if (not noNamespace) {
            xpathDefaultNamespace := namespace;
        };
        excludeResultPrefixes := PrefixListOrAllMember1::all;
    };

    stylesheetObj._import := object ImportType {
        href := 'iso20022-validation.xsl';
    };

    var rootPathExpr := self.getRootPath();

    var props := self.allAttributes()->closure(type.oclAsType(Classifier).allAttributes())->union(self.allAttributes());

    object XMLTypeDocumentRoot {};
    stylesheetObj.declarationGroup := object VariableType {
        name := 'elementNames';
        as := 'item()*';
        select := 'fn:doc(\'' + msgId + '-metadata.xml\')';
    }->toFMEntry('variable');

    stylesheetObj.declarationGroup += self->closure(attribute.type[Classifier])->including(self)->sortedBy(name)->
        //select(ownedRule->exists(not isExternal()))->
        select(ownedRule->notEmpty())->
        toTemplate(stylesheetObj, rootPathExpr, props)->toFMEntry('template');

//    stylesheetObj.declarationGroup := self->closure(attribute.type[Classifier])->including(self).
//        ownedRule->sortedBy(name)->
//        toTemplate2(stylesheetObj, rootPathExpr, props)->toFMEntry('template');

    stylesheet := stylesheetObj;

    xMLNSPrefixMap += resolveIn(ExprSingle::findQNames, StylesheetQNames)
        ->select(stylesheet=stylesheetObj).qnames
        ->collect(qname|object EStringToStringMapEntry {
            key := qname.getPrefix();
            value := qname.getNamespaceURI();
        });
}

mapping Classifier::toStylesheetForHTML() : DocumentRoot
{
    init {
        var msgId := self.getValue(profileName + '::MessageDefinition', 'messageDefinitionIdentifier');
        result := self.xmap toStylesheetForHTML(msgId);
    }
}

mapping Classifier::toStylesheetForHTML(fileName : String) : DocumentRoot
{
    var msgId := self.getValue(profileName + '::MessageDefinition', 'messageDefinitionIdentifier');
    var namespace := 'urn:iso:std:iso:20022:tech:xsd:' + msgId;

    log('  Generating HTML version of XSLT for message ' + msgId);

    var stylesheetObj := object TransformType {
        id := fileName + '-html';
        version := 2;
        xpathDefaultNamespace := namespace;
        excludeResultPrefixes := PrefixListOrAllMember1::all;
    };

    stylesheetObj._import := object ImportType {
        href := fileName + '.xsl';
    };
    stylesheetObj._import += object ImportType {
        href := 'iso20022-validation-html.xsl';
    };

    stylesheet := stylesheetObj;
}

mapping NamedElement::toPathExpr(stylesheet : TransformType, rootPathExpr : PathExpr, props : Set(Property)) : Set(PathExpr)
{
    init {
        var currentType := if self.oclIsKindOf(Type) then self else self.owner endif;
        var parents := props->select(type = currentType);
        if (currentType.oclIsKindOf(Signal) or parents->isEmpty()) {
            result += rootPathExpr.deepclone().oclAsType(PathExpr);
        }
        else {
            result := parents.xmap toPathExpr(stylesheet, rootPathExpr, props).deepclone()[PathExpr]->asSet();
        };
    }
    if (self.oclIsKindOf(Property)) {
        result->forEach (path) {
            path.step += object ChildStepExpr {
                step := object AbbrevForwardStep {
                    kind := AbbrevForwardStepKind::child;
                    nodeTest := object QNameTest { name := self.getQName() };
                };
            };
        };
    }
}

-- The mapping is called for each type which has rules.
mapping Classifier::toTemplate(stylesheet : TransformType, rootPathExpr : PathExpr, props : Set(Property)) : TemplateType
{
    var contexts := self.xmap toPathExpr(stylesheet, rootPathExpr, props);
    if (contexts->isEmpty()) {
        contexts += object PathExpr {
            step := object RootStepExpr { };
        };
    };
    var context := object UnionExpr {
        operand := contexts->sortedBy(toString());
        operation := Sequence{1..operand->size()-1}->collect(UnionOp::vertical_bar);
    };
    context.xmap findQNames(stylesheet);
    match := context.toString();

    instructionGroup += object VariableType {
        name := '__context';
        select := '.';
    }->toFMEntry('variable');

    self.ownedRule->
        collect(c | Tuple { constraint = c, rule = c.xmap toRule() })->
        select(notEmpty(rule.name))->sortedBy(rule.name)->forEach (c)
    {
        log('    Found rule ' + c.rule.name);

        var statements : Sequence(EFeatureMapEntry);
        if (terminateOnException) {
            statements := c.constraint.xmap toInstructionGroup(stylesheet);
            assert fatal (statements->notEmpty()) with log('Unable to generate validation code');
        }
        else {
            try {
                statements := c.constraint.xmap toInstructionGroup(stylesheet);
            }
            except (ex : Exception) {
                assert warning (false) with log(ex.repr());
            };
            if (statements->notEmpty()) {
                instructionGroup += statements;
            }
            else {
                instructionGroup += c.constraint.xmap toUnsupported(stylesheet);
            }
        };
    };

    instructionGroup += object ApplyTemplatesType { }.toFMEntry('applyTemplates');
}

mapping Constraint::toInstructionGroup(stylesheet : TransformType) : List(EFeatureMapEntry)
{
    var expr := self.toExpressionInOCL();
    assert fatal (not expr.ownedContext.oclIsInvalid())
        with log('Unable to parse "' + self.specification[OpaqueExpression]->any(language->includes('OCL')).body->any(true) + '"');

    var variables : Dict(OCL::Variable, XPATH2::ExprSingle);
    variables->put(expr.ownedContext, object VarRef { varName := createQName('__context') });

    result += self.xmap toValidationCode(stylesheet, expr.ownedBody, expr.ownedContext, variables);
}

mapping Constraint::toValidationCode(
    stylesheet : TransformType,
    expr : OCLExpression,
    context : OCL::Variable,
    variables : Dict(OCL::Variable, XPATH2::ExprSingle)) : List(EFeatureMapEntry)
disjuncts
    Constraint::toLet,
    Constraint::toImplies,
    Constraint::toForAll,
    Constraint::toValidate
{
}

mapping Constraint::toLet(
    stylesheet : TransformType,
    expr : OCLExpression,
    context : OCL::Variable,
    variables : Dict(OCL::Variable, XPATH2::ExprSingle)) : List(EFeatureMapEntry)
when { expr.isLet() }
{
    var variableExpr := expr![LetExp].ownedVariable;
    var variableName := self.getUniqueName(variableExpr);
    var variables2 : Dict(OCL::Variable, XPATH2::ExprSingle);
    variables->keys()->forEach (key) {
        variables2->put(key, variables->get(key));
    };
    variables2->put(variableExpr, object VarRef { varName := createQName(variableName) });

    result += object VariableType {
        name := variableName;
        select := variableExpr.ownedInit.xmap toXPath(stylesheet, self, variables).toString();
    }->toFMEntry('variable');

    result += self.xmap toValidationCode(stylesheet, expr![LetExp].ownedIn, context, variables2);
}

mapping Constraint::toImplies(
    stylesheet : TransformType,
    expr : OCLExpression,
    context : OCL::Variable,
    variables : Dict(OCL::Variable, XPATH2::ExprSingle)) : List(EFeatureMapEntry)
when { expr.isImplies() }
{
    result += object ChooseType {
        _when := object WhenType {
            test := expr![OperationCallExp].ownedSource.xmap toXPath(stylesheet, self, variables).toString();
            mixed := self.xmap toValidationCode(stylesheet, expr![OperationCallExp].ownedArguments->first(), context, variables);
        };
        otherwise := object SequenceConstructor {
            mixed := self.xmap toIrrelevant(stylesheet);
        };
    }->toFMEntry('choose');
}

mapping Constraint::toForAll(
    stylesheet : TransformType,
    expr : OCLExpression,
    context : OCL::Variable,
    variables : Dict(OCL::Variable, XPATH2::ExprSingle)) : List(EFeatureMapEntry)
when { expr.isForAll() }
{
    var contextExpr := expr![IteratorExp].ownedSource;

    result += object ForEachType {
        assert fatal (expr![IteratorExp].ownedIterators->size() = 1);
        var iterator := expr![IteratorExp].ownedIterators->first();
        var variableName := self.getUniqueName(iterator);
        var variables2 : Dict(OCL::Variable, XPATH2::ExprSingle);
        variables->keys()->forEach (key) {
            variables2->put(key, variables->get(key));
        };
        variables2->put(iterator, object FunctionCall { name := createQName('current') });
        select := contextExpr.xmap toXPath(stylesheet, self, variables).toString();
        instructionGroup += self.xmap toValidationCode(stylesheet, expr![IteratorExp].ownedBody, iterator, variables2);
    }->toFMEntry('forEach');
}

mapping Constraint::toValidate(
    stylesheet : TransformType,
    expr : OCLExpression,
    context : OCL::Variable,
    variables : Dict(OCL::Variable, XPATH2::ExprSingle)) : List(EFeatureMapEntry)
{
    result += object CallTemplateType {
        name := 'validate';

        var rule := self.xmap toRule();

        withParam += object WithParamType {
            name := 'code';
            text := rule.name;
        };
        withParam += object WithParamType {
            name := 'isValid';
            select := expr.xmap toXPath(stylesheet, self, variables).toString();
        };
        withParam += object WithParamType {
            name := 'definition';
            text := rule.description;
        };
        withParam += object WithParamType {
            name := 'ocl';
            text := rule.ocl;
        };
        withParam += object WithParamType {
            name := 'error';
            mixed := rule.errorMessage.toMessage(stylesheet, context.type, self, variables);
        };
        if (notEmpty(rule.successMessage)) {
            withParam += object WithParamType {
                name := 'valid';
                mixed := rule.successMessage.toMessage(stylesheet, context.type, self, variables);
            };
        };
    }->toFMEntry('callTemplate');
}

mapping Constraint::toIrrelevant(stylesheet : TransformType) : List(EFeatureMapEntry)
{
    result += object CallTemplateType {
        name := 'irrelevant';

        var rule := self.xmap toRule();

        withParam += object WithParamType {
            name := 'code';
            text := rule.name;
        };
        withParam += object WithParamType {
            name := 'definition';
            text := rule.description;
        };
        withParam += object WithParamType {
            name := 'ocl';
            text := rule.ocl;
        };
    }->toFMEntry('callTemplate');
}

mapping Constraint::toUnsupported(stylesheet : TransformType) : List(EFeatureMapEntry)
{
    result += object CallTemplateType {
        name := 'unsupported';

        var rule := self.xmap toRule();

        withParam += object WithParamType {
            name := 'code';
            text := rule.name;
        };
        withParam += object WithParamType {
            name := 'definition';
            text := rule.description;
        };
        withParam += object WithParamType {
            name := 'ocl';
            text := rule.ocl;
        };
    }->toFMEntry('callTemplate');
}

///////////////////////////////////////////////////////////////////////////////
// Helpers

query String::toMessage(stylesheet : TransformType, context : OCL::Type, constraint : Constraint, variables : Dict(OCL::Variable, XPATH2::ExprSingle)) : Sequence(EFeatureMapEntry) =
    self.tokenizeDocOCL()->collect(token|
        if token.isExpr then
            object ValueOfType {
                select := token.text.toExpressionInOCL(context).ownedBody.xmap toXPath(stylesheet, constraint, variables).toString();
            }->toFMEntry('valueOf')
        else
            object TextType {
                value := token.text;
            }->toFMEntry('text')
        endif);

mapping OCLExpression::toXPath(stylesheet : TransformType, constraint : Constraint, variables : Dict(OCL::Variable, XPATH2::ExprSingle)) : ExprSingle
{
    init {
        //try {
            //log('    Transforming OCL expression\n      ' + self.toString());
            result := self.xmap toExprSingle(constraint, variables);
            //log('    to\n      ' + result.toString());
        //}
        //except () {
        //    log('WARNING: Unable to transform expression');
        //    result := object FunctionCall { name := 'true'.createFunctionQName() };
        //};
    }
    result.xmap findQNames(stylesheet);
}

intermediate class StylesheetQNames { stylesheet : TransformType; qnames : Set(TYPE::QName); };

mapping ExprSingle::findQNames(currentStylesheet : TransformType) : StylesheetQNames
{
    stylesheet := currentStylesheet;
    qnames := self.allSubobjects()[EObject]->
        collect(obj|obj.eClass().eAttributes->collect(attr|obj.eGet(attr)))[TYPE::QName]->
        select(getPrefix() <> null and getNamespaceURI() <> null)->asSet();
}

query GenericElementType::toFMEntry(name : String) : EFeatureMapEntry =
    createFeatureMapEntry('http://www.w3.org/1999/XSL/Transform', name, self);

// TODO: Constraints must be parsed only once
//query Constraint::isSupported() : Boolean =
//    self.toExpressionInOCL().ownedBody.isSupported();

//query OCLExpression::isSupported() : Boolean =
//    if self.oclIsKindOf(OperationCallExp) then self![OperationCallExp]->forAll(
//        referredOperation.name <> 'allInstances' and ownedSource.isSupported() and ownedArguments->forAll(isSupported()))
//    elif self.oclIsKindOf(IteratorExp) then self![IteratorExp]->forAll(
//        ownedSource.isSupported() and ownedBody->forAll(isSupported()))
//    else true endif;
