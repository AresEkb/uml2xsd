/**
 * Copyright (c) 2015 Denis Nikiforov.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    Denis Nikiforov - initial API and implementation
 */

/**
 * Types, elements and other objects may be duplicated in several output schemas.
 * So we pass root of the output schema as additional mapping argument to generate duplicate objects.
 *
 */

import uml2xsd.UtilitiesLibrary;
import OCLtoXPath;

modeltype UML uses 'http://www.eclipse.org/uml2/2.1.0/UML';
modeltype OCL 'strict' uses 'http://www.eclipse.org/ocl/2015/Pivot';
modeltype XSD uses 'http://www.w3.org/2001/XMLSchema';
modeltype VC uses 'http://www.w3.org/2007/XMLSchema-versioning';
modeltype XPATH2 'strict' uses 'http://www.emftext.org/language/xpath2';
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype TYPE uses 'http://www.eclipse.org/emf/2003/XMLType';

transformation ISO20022toXSD11(in m : UML, out x : XSD)
    extends OCLtoXPath;

property profileName : String = 'ISO20022Profile';

main()
{
    m.objectsOfType(Signal)->select(is('MessageDefinition'))->toSchema();
}

mapping Classifier::toSchema() : DocumentRoot
{
    var msgId := self.getValue(profileName + '::MessageDefinition', 'messageDefinitionIdentifier');
    var namespace := 'urn:iso:std:iso:20022:tech:xsd:' + msgId;
    
    log('  Found message ' + msgId);
    var schemaObj := object SchemaType {
        targetNamespace := namespace;
        anyAttribute := createFeatureMapEntry('http://www.w3.org/2007/XMLSchema-versioning', 'minVersion', '1.1');
        elementFormDefault := FormChoice::qualified;
    };

    xMLNSPrefixMap += object EStringToStringMapEntry {
        value := namespace;
    };

    schemaObj.element += object TopLevelElement {
        name := 'Document';
        type := createQName(name);
    };

    schemaObj.complexType += object TopLevelComplexType {
        name := 'Document';
        sequence := object ExplicitGroup {
            element := object LocalElement {
                name := self.generateXMLTag();
                type := createQName(self.name);
            };
        };
    };

    schemaObj.complexType += object TopLevelComplexType {
        name := self.name;
        sequence := object ExplicitGroup {
            element := self.attribute->collect(attr|object LocalElement {
                name := attr.generateXMLTag();
                type := attr.type.getUnprefixedQName();
            });
        };
    };

    self->closure(attribute.type[Classifier])->sortedBy(name)->forEach (obj) {
        if (obj.is('MessageComponentType')) {
    	   schemaObj.complexType += obj->toComplexType(schemaObj);
    	}
        elif (obj.is('Datatype') or obj.is('CodeSet') or obj.is('IdentifierSet')) {
           schemaObj.simpleType += obj->toSimpleType(schemaObj);
        }
    	else {
    	   assert fatal (false) with log('Mapping of classifer "' + obj.getNameWithStereotypes() + '" is not supported');
    	};
    };

    schema := schemaObj;
    
    xMLNSPrefixMap += resolveIn(Expr::findQNames, SchemaQNames)
        ->select(schema=schemaObj).qnames
        ->collect(qname|object EStringToStringMapEntry {
            key := qname.getPrefix();
            value := qname.getNamespaceURI();
        });
}

mapping Classifier::toSimpleType(schema : SchemaType) : TopLevelSimpleType
{
    var types : Dict(String, String);
    types->put('Decimal', 'decimal');
    types->put('Binary', 'base64Binary');
    types->put('Boolean', 'boolean');
    types->put('String', 'string');
    types->put('DateTime', 'dateTime');
    types->put('Date', 'date');
    types->put('Time', 'time');
    types->put('Month', 'gMonth');
    types->put('Year', 'gYear');
    types->put('Day', 'gDay');
    types->put('Duration', 'duration');
    types->put('MonthDay', 'gMonthDay');
    types->put('YearMonth', 'gYearMonth');
    types->put('CodeSet', 'string');
    types->put('IdentifierSet', 'string');

    var stereotypes := self.getAppliedStereotypes()->union(self.getAppliedStereotypes().allParents().oclAsType(Stereotype))
        ->select(owner.oclAsType(Profile).name = 'ISO20022Profile')
        ->select(types->hasKey(name));

    assert fatal (stereotypes->size() = 1) with log('DataType "' + self.getNameWithStereotypes() + '" must have exactly one stereotype stereotype (inherited from Datatype, CodeSet or IdentifierSet)');
    var stereotype := stereotypes->any(true).name;
    
    name := self.generateXMLTag();
    restriction := object RestrictionType1 {
        base := createQName('http://www.w3.org/2001/XMLSchema', types->get(stereotype), 'xs');
        facetGroup := self.getFacetGroup();
    };
}

mapping Classifier::toComplexType(schema : SchemaType) : TopLevelComplexType
{
    name := self.generateXMLTag();
    //attribute := self.getOwnedAttributes()->toAttribute();
    if (self.is('MessageComponent')) {
        sequence := self.map toExplicitGroup(schema);
    }
    elif (self.is('ChoiceComponent')) {
        choice := self.map toExplicitGroup(schema);
    }
    else {
        assert fatal (false);
    };
    _assert := self.ownedRule->sortedBy(name).xmap toAssertion(schema);
}

mapping Property::toAttribute(schema : SchemaType) : Attribute
{
    name := self.generateXMLTag();
    type := self.type.getUnprefixedQName();
    if (self.lower = 1 and self.upper = 1) {
        use := UseType::required;
    } 
    elif (self.lower = 0 and self.upper = 1) {
        use := UseType::optional;
    } 
    elif (self.lower = 0 and self.upper = 0) {
        use := UseType::prohibited;
    } 
}

mapping Classifier::toExplicitGroup(schema : SchemaType) : ExplicitGroup
when { self.getAttributes()->notEmpty() }
{
    element := self.getAttributes()->toLocalElement(schema);
}

mapping Property::toLocalElement(schema : SchemaType) : LocalElement
{
    name := self.generateXMLTag();
    type := self.type.getUnprefixedQName();
    if (self.lower = 0 or self.lower > 1) {
        minOccurs := self.lower.toBigInteger();
    };
    if (self.upper <> 1) {
        maxOccurs := if self.upper = -1 then AllNNIMember1::unbounded else self.upper.toBigInteger() endif;
    };
}

mapping Constraint::toAssertion(schema : SchemaType) : Assertion
{
    var xpath := self.toExpressionInOCL().xmap toXPath();
    xpath.xmap findQNames(schema);
    test := xpath.toString();
    //annotation := self.getAnnotation();
}

intermediate class SchemaQNames { schema : SchemaType; qnames : Set(QName); };

mapping Expr::findQNames(currentSchema : SchemaType) : SchemaQNames
{
    schema := currentSchema;
    qnames := self.allSubobjects()[EObject]->collect(
                    obj|obj.eClass().eAttributes->collect(attr|obj.eGet(attr)))
                ->selectByKind(QName).oclAsSet()
                ->select(getPrefix() <> null and getNamespaceURI() <> null)->asSet();
}

///////////////////////////////////////////////////////////////////////////////
// Helpers

query Classifier::getFacetGroup() : List(EFeatureMapEntry)
{
    var facetGroup : List(EFeatureMapEntry);
    facetGroup += self.createFacet('minInclusive');
    facetGroup += self.createFacet('minExclusive');
    facetGroup += self.createFacet('maxInclusive');
    facetGroup += self.createFacet('maxExclusive');
    facetGroup += self.createTotalDigitsType('totalDigits');
    facetGroup += self.createNumFacet('fractionDigits');
    facetGroup += self.createNumFacet('length');
    facetGroup += self.createNumFacet('minLength');
    facetGroup += self.createNumFacet('maxLength');
    facetGroup += self.createPatternType('pattern');
    facetGroup += self[Enumeration].createNoFixedFacet('enumeration');
    return facetGroup;
}

query Classifier::createFacet(name : String) : Bag(EFeatureMapEntry) =
    let val = self.getValue('EECProfile::ValueDomain', name) in
    if val <> null
        then Bag{ createFeatureMapEntry('http://www.w3.org/2001/XMLSchema', name, object Facet { value := val }) }
        else Bag{} endif;

query Classifier::createNumFacet(name : String) : Bag(EFeatureMapEntry) =
    let val = self.getValue('EECProfile::ValueDomain', name) in
    if val <> null
        then Bag{ createFeatureMapEntry('http://www.w3.org/2001/XMLSchema', name, object NumFacet { value := val }) }
        else Bag{} endif;

query Classifier::createTotalDigitsType(name : String) : Bag(EFeatureMapEntry) =
    let val = self.getValue('EECProfile::ValueDomain', name) in
    if val <> null
        then Bag{ createFeatureMapEntry('http://www.w3.org/2001/XMLSchema', name, object TotalDigitsType { value := val }) }
        else Bag{} endif;

query Classifier::createPatternType(name : String) : Bag(EFeatureMapEntry) =
    let val = self.getValue('EECProfile::ValueDomain', name) in
    if val <> null
        then Bag{ createFeatureMapEntry('http://www.w3.org/2001/XMLSchema', name, object PatternType { value := val }) }
        else Bag{} endif;

// TODO: Sorting doesn't work
query Enumeration::createNoFixedFacet(name : String) : Sequence(EFeatureMapEntry) =
    self.ownedLiteral->sortedBy(name)
        ->collect(val|createFeatureMapEntry('http://www.w3.org/2001/XMLSchema',
            name, object NoFixedFacet { value := val.name; }));

query NamedElement::generateXMLTag() : String
{
    var name : String;
    if (self.is('MessageDefinition')) {
        name := self.getValue(profileName + '::MessageDefinition', 'xmlTag');
    }
    elif (self.is('MessageBuildingBlock')) {
        name := self.getValue(profileName + '::MessageBuildingBlock', 'xmlTag');
    }
    elif (self.is('MessageElement')) {
        name := self.getValue(profileName + '::MessageElement', 'xmlTag');
    }
    else {
        name := self.name;
        if (name.lastIndexOf('.') > 0) {
            name := name.substring(1, name.lastIndexOf('.'));
        };
        name := name.replaceFirst('V\\d+$', '');
        // TODO http://www.iso20022.org/documents/general/XML_Tag_algorithm.pdf
    };

    assert fatal (name <> null and name.size() > 0) with log('For element ' + self.getNameWithStereotypes() + ' generated empty xmlTag');
    
    return name;
}

///////////////////////////////////////////////////////////////////////////////
// Overrides

// TODO: OCLtoXPath uses both prefixed and unprefixed names. Something must be refactored.
query NamedElement::getQName() : QName =
    self.getUnprefixedQName();
//    assert fatal (false) with log('NamedElement::getQName() must not be used');

query NamedElement::getUnprefixedQName() : QName =
    createQName(self.generateXMLTag()).oclAsType(QName);

query Element::is(stereotypeName : String) : Boolean = self.is(profileName, stereotypeName);

query NamedElement::isDataType() : Boolean = true;

query NamedElement::isDataElement() : Boolean = false;

query NamedElement::isAttribute() : Boolean = self.getAppliedStereotype('EECProfile::Attribute') <> null;
