/**
 * Copyright (c) 2013, 2015 Denis Nikiforov.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    Denis Nikiforov - initial API and implementation
 */

import uml2xsd.UtilitiesLibrary;
import OCLtoXPath;

modeltype UML uses 'http://www.eclipse.org/uml2/2.1.0/UML';
modeltype OCL 'strict' uses 'http://www.eclipse.org/ocl/2015/Pivot';
modeltype XSD uses 'http://www.w3.org/2001/XMLSchema';
modeltype VC uses 'http://www.w3.org/2007/XMLSchema-versioning';
modeltype XPATH2 'strict' uses 'http://www.emftext.org/language/xpath2';
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype TYPE uses 'http://www.eclipse.org/emf/2003/XMLType';

transformation EAEUtoXSD11(in m : UML, out x : XSD)
    extends OCLtoXPath;

main()
{
    m.objectsOfType(Package)->select(isNamespace() and not(isXMLPT()))->toSchema();
}

mapping Package::toSchema() : DocumentRoot
{
    log("  Found namespace " + self.getTargetNS());
    xMLNSPrefixMap += object EStringToStringMapEntry {
        key := self.getTargetNSPrefix();
        value := self.getTargetNS();
    };
    var schemaObj := object SchemaType {
        targetNamespace := self.getTargetNS();
        version := self.getTargetNSVersion();
        _import := self.packageImport.xmap toImport()->sortedBy(namespace);
        anyAttribute := createFeatureMapEntry('http://www.w3.org/2007/XMLSchema-versioning', 'minVersion', '1.1');
        elementFormDefault := FormChoice::qualified;
        attributeFormDefault := FormChoice::unqualified;
    };
    self.allSubobjects()[Classifier]->sortedBy(name)->forEach(obj) {
        if (obj.oclIsKindOf(DataType)) {
            schemaObj.mixed += createFeatureMapEntry('http://www.eclipse.org/emf/2003/XMLType', 'comment',
                ' ' + coalesce(obj.getValue('EECProfile::EECDataModel', 'standardId'), '') +
                ': ' + coalesce(obj.getValue('EECProfile::EECDataModel', 'businessName'), '') +
                ' (' + coalesce(obj.getValue('EECProfile::EECDataModel', 'standardName'), '') + ') ');
        }
        else {
            // TODO: In a future version properties will be taken from a class itself.
            schemaObj.mixed += createFeatureMapEntry('http://www.eclipse.org/emf/2003/XMLType', 'comment',
                ' ' + coalesce(obj.attribute->any(true).getValue('EECProfile::EECDataModel', 'standardId'), '') +
                ': ' + coalesce(obj.attribute->any(true).getValue('EECProfile::EECDataModel', 'businessName'), '') +
                ' (' + coalesce(obj.attribute->any(true).getValue('EECProfile::EECDataModel', 'standardName'), '') + ') ');
        };
        schemaObj.element += obj[Class]->toElement();
        schemaObj.simpleType += obj[DataType]->toSimpleType();
        schemaObj.complexType += obj[DataType]->toComplexType(schemaObj);
    };
    schema := schemaObj;
    xMLNSPrefixMap += resolveIn(Expr::findQNames, SchemaQNames)
        ->select(schema=schemaObj).qnames
        ->collect(qname|object EStringToStringMapEntry {
            key := qname.getPrefix();
            value := qname.getNamespaceURI();
        });
}

mapping PackageImport::toImport() : ImportType
{
    var ns := self.importedPackage.getNS();
	namespace := ns.getTargetNS();
	schemaLocation := ns.getSchemaLocation();
}

mapping DataType::toSimpleType() : TopLevelSimpleType
when { self.getAllAttributes()->isEmpty() }
{
    name := self.name;
    annotation := self.getAnnotation();
    var realizations := Realization.allInstances()
        ->select(supplier->exists(s|s=self) and client->forAll(getNS().isXMLPT()))
        .client->selectByKind(Classifier);
    if (self.generalization->size() = 1) {
        restriction := object RestrictionType1 {
            base := self.generalization->any(true).general.getQName();
            facetGroup := self.getFacetGroup();
        };
    }
    elif (realizations->size() = 1) {
        restriction := object RestrictionType1 {
            base := realizations->any(true).getQName();
            facetGroup := self.getFacetGroup();
        };
    }
    else {
    	assert fatal (false) with log('DataType \'' + self.getQualifiedName() + '\' must have a base type or a realization');
    }
}

mapping DataType::toComplexType(schema : SchemaType) : TopLevelComplexType
when { self.getAllAttributes()->notEmpty() }
{
    name := self.name;
    annotation := self.getAnnotation();
    if (self.generalization->isEmpty()) {
        attribute := self.getOwnedAttributes()->toAttribute();
        sequence := self.map toExplicitGroup();
        _assert := self.ownedRule.xmap toAssertion(schema);
    }
    elif (self.generalization->size() = 1) {
        var generalization := self.generalization->any(true);
        var baseType := generalization.general;
  	    if (self.hasComplexContent()) {
            complexContent := object ComplexContentType {
                if (generalization.isRestriction()) {
                    restriction := object ComplexRestrictionType {
                        base := baseType.getQName();
                        attribute := self.getOwnedAttributes()->toAttribute();
                        sequence := self.map toExplicitGroup();
                        _assert := self.ownedRule.xmap toAssertion(schema);
                    }
                }
                else {
                    extension := object ExtensionType {
                        base := baseType.getQName();
                        attribute := self.getOwnedAttributes()->toAttribute();
                        sequence := self.map toExplicitGroup();
                        _assert := self.ownedRule.xmap toAssertion(schema);
                    }
                }
            }
        }
        else {
            simpleContent := object SimpleContentType {
                if (generalization.isRestriction()) {
                    restriction := object SimpleRestrictionType {
                        base := baseType.getQName();
                        attribute := self.getOwnedAttributes()->toAttribute();
                        sequence := self.map toExplicitGroup();
                        _assert := self.ownedRule.xmap toAssertion(schema);
                    }
                }
                else {
                    extension := object SimpleExtensionType {
                        base := baseType.getQName();
                        attribute := self.getOwnedAttributes()->toAttribute();
                        sequence := self.map toExplicitGroup();
                        _assert := self.ownedRule.xmap toAssertion(schema);
                    }
                }
            }
        }
    }
}

mapping Class::toElement() : TopLevelElement
{
    name := self.name;
    // TODO: Annotation will be contained in element itself in a new model version
    annotation := self.attribute->any(true).getAnnotation();
    // TODO: Property will be named 'value' in a new model version
    var dataType := self.attribute->any(true/*name = 'value'*/).type;
    type := dataType.getQName();
}

mapping Property::toAttribute() : Attribute
{
    name := self.name;
    type := self.type.getQName();
    if (self.lower = 1 and self.upper = 1) {
        use := UseType::required;
    } 
    elif (self.lower = 0 and self.upper = 1) {
        use := UseType::optional;
    } 
    elif (self.lower = 0 and self.upper = 0) {
        use := UseType::prohibited;
    } 
}

mapping DataType::toExplicitGroup() : ExplicitGroup
when { self.getOwnedElements()->notEmpty() }
{
    element := self.getOwnedElements()->toLocalElement();
}

mapping Property::toLocalElement() : LocalElement
{
    ref := self.type.getQName();
    if (self.lower = 0 or self.lower > 1) {
        minOccurs := self.lower;
    };
    if (self.upper <> 1) {
        maxOccurs := if self.upper = -1 then AllNNIMember1::unbounded else self.upper endif;
    };
}

mapping Constraint::toAssertion(schema : SchemaType) : Assertion
{
    var xpath := self.toExpressionInOCL().xmap toXPath();
    xpath.xmap findQNames(schema);
    test := xpath.toString();
    annotation := self.getAnnotation();
}

intermediate class SchemaQNames { schema : SchemaType; qnames : Set(QName); };

mapping Expr::findQNames(currentSchema : SchemaType) : SchemaQNames
{
    schema := currentSchema;
    qnames := self.allSubobjects()[EObject]->collect(
                    obj|obj.eClass().eAttributes->collect(attr|obj.eGet(attr)))
                ->selectByKind(QName).oclAsSet()
                ->select(getPrefix() <> null and getNamespaceURI() <> null)->asSet();
}

mapping String::toAnnotation() : AnnotationType
when { self.size() > 0 }
{
    documentation := object DocumentationType {
        mixed := createFeatureMapEntry('http://www.eclipse.org/emf/2003/XMLType', 'text',
            self.replaceAll('&nbsp;', ' ').replaceAll('\r\n', '\n').replaceAll('\n', ' '));
    };
}

///////////////////////////////////////////////////////////////////////////////
// Helpers

query Package::getSchemaLocation() : String =
    self.getTargetNS().replaceAll('^urn:', '').substituteAll(':', '_') + '.xsd';

query Package::isXMLPT() : Boolean =
    self.getTargetNS() = 'http://www.w3.org/2001/XMLSchema';

query Classifier::getOwnedAttributes() : Sequence(Property) =
    self.getAttributes()->select(getAppliedStereotype('EECProfile::Attribute') <> null);

query Classifier::getOwnedElements() : Sequence(Property) =
    self.getAttributes()->select(getAppliedStereotype('EECProfile::Attribute') = null);

query Classifier::hasComplexContent() : Boolean =
    if self.getOwnedElements()->notEmpty() then true
    else self.general->hasComplexContent()->exists(b|b=true) endif;

query Package::isNamespace() : Boolean =
    self.getAppliedStereotype('EECProfile::Namespace') <> null;

query Generalization::isRestriction() : Boolean =
    self.getAppliedStereotype('EECProfile::restriction') <> null;

query Element::getAnnotation() : AnnotationType =
    self.ownedComment.body->toAnnotation()->any(true);

query EnumerationLiteral::getAnnotation() : AnnotationType =
    self.specification[OpaqueExpression].body->toAnnotation()->any(true);

query DataType::getFacetGroup() : List(EFeatureMapEntry)
{
    var facetGroup : List(EFeatureMapEntry);
    facetGroup += self.createFacet('minInclusive');
    facetGroup += self.createFacet('minExclusive');
    facetGroup += self.createFacet('maxInclusive');
    facetGroup += self.createFacet('maxExclusive');
    facetGroup += self.createTotalDigitsType('totalDigits');
    facetGroup += self.createNumFacet('fractionDigits');
    facetGroup += self.createNumFacet('length');
    facetGroup += self.createNumFacet('minLength');
    facetGroup += self.createNumFacet('maxLength');
    facetGroup += self.createPatternType('pattern');
    facetGroup += self[Enumeration].createNoFixedFacet('enumeration');
    return facetGroup;
}

query DataType::createFacet(name : String) : Bag(EFeatureMapEntry) =
    let val = self.getValue('EECProfile::ValueDomain', name) in
    if val <> null
        then Bag{ createFeatureMapEntry('http://www.w3.org/2001/XMLSchema', name, object Facet { value := val }) }
        else Bag{} endif;

query DataType::createNumFacet(name : String) : Bag(EFeatureMapEntry) =
    let val = self.getValue('EECProfile::ValueDomain', name) in
    if val <> null
        then Bag{ createFeatureMapEntry('http://www.w3.org/2001/XMLSchema', name, object NumFacet { value := val }) }
        else Bag{} endif;

query DataType::createTotalDigitsType(name : String) : Bag(EFeatureMapEntry) =
    let val = self.getValue('EECProfile::ValueDomain', name) in
    if val <> null
        then Bag{ createFeatureMapEntry('http://www.w3.org/2001/XMLSchema', name, object TotalDigitsType { value := val }) }
        else Bag{} endif;

query DataType::createPatternType(name : String) : Bag(EFeatureMapEntry) =
    let val = self.getValue('EECProfile::ValueDomain', name) in
    if val <> null
        then Bag{ createFeatureMapEntry('http://www.w3.org/2001/XMLSchema', name, object PatternType { value := val }) }
        else Bag{} endif;

// TODO: Sorting doesn't work
query Enumeration::createNoFixedFacet(name : String) : Sequence(EFeatureMapEntry) =
    self.ownedLiteral->sortedBy(name)
        ->collect(val|createFeatureMapEntry('http://www.w3.org/2001/XMLSchema',
            name, object NoFixedFacet { value := val.name; annotation := val.getAnnotation(); }));

query Element::getNS() : Package = self.getNearestPackage().getNS();

query Package::getNS() : Package =
      if self.getAppliedStereotype('EECProfile::Namespace') <> null then self
    elif self.owner <> null then self.owner.getNS()
    else null
    endif;

query Package::getTargetNS() : String = self.getValue('EECProfile::Namespace', 'name');
query Package::getTargetNSPrefix() : String = self.getValue('EECProfile::Namespace', 'prefix');
query Package::getTargetNSVersion() : String = self.getValue('EECProfile::Namespace', 'version');

query NamedElement::getNSWithGuards() : Package
{
    assert fatal (self.getQualifiedName() <> null)
        with log('Unable to resolve element \'' + self.toString() + '\'');
    var ns := self.getNS();
    assert fatal (ns <> null)
        with log('Namespace of a \'' + self.getQualifiedName() + '\' not found');
    return ns;
}

///////////////////////////////////////////////////////////////////////////////
// Overrides

query NamedElement::getQName() : QName
{
    var ns := self.getNSWithGuards();
    // HACK
    // var ns := self.getNS();
    // if (ns = null) {
    //     return createQName('unknown', self.name, 'un').oclAsType(QName); 
    // };
    return createQName(ns.getTargetNS(), self.name, ns.getTargetNSPrefix()).oclAsType(QName);
}

query NamedElement::getUnprefixedQName() : QName
{
    var ns := self.getNSWithGuards();
    return createQName(self.name).oclAsType(QName);
}

query Element::is(stereotypeName : String) : Boolean = self.is('EECProfile', stereotypeName);

query NamedElement::isDataType() : Boolean = self.oclIsKindOf(DataType);

query NamedElement::isDataElement() : Boolean = self.oclIsKindOf(Class);

query NamedElement::isAttribute() : Boolean = self.getAppliedStereotype('EECProfile::Attribute') <> null;
