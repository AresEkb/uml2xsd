/**
 * Copyright (c) 2015, 2016 Denis Nikiforov.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Denis Nikiforov - initial API and implementation
 */

import uml2xsd.UtilitiesLibrary;
import Helpers;

transformation ISO20022Helpers;

modeltype UML uses 'http://www.eclipse.org/uml2/2.1.0/UML';
modeltype OCL 'strict' uses 'http://www.eclipse.org/ocl/2015/Pivot';
modeltype XPATH2 'strict' uses 'http://www.emftext.org/language/xpath2';
modeltype TYPE uses 'http://www.eclipse.org/emf/2003/XMLType';

property profileName : String = 'ISO20022Profile';

intermediate class Rule {
    id : String;             // required
    name : String;           // optional
    description : String;    // required
    source : String;         // optional
    ocl : String;            // required
    errorMessage : String;   // required
    successMessage : String; // optional
};

mapping Constraint::toRule() : Rule
{
    if (notEmpty(self.getAnnotation('id', ''))) {
        id := self.getAnnotation('id');
        name := self.getAnnotation('name', '');
        description := self.getAnnotation('description', '');
        source := self.getAnnotation('source', '');
        ocl := self.specification[OpaqueExpression].body->any(true).replace('\r\n', '\n');
        errorMessage := self.getAnnotation('errorMessage');
        successMessage := self.getAnnotation('successMessage', '');
    }
    else {
        var doc := self.ownedComment.body->any(true).cleanML().tokenize(Set { '\n\n' });
        assert fatal (doc->size() >= 2 and doc->size() <= 3)
            with log('Constraint\' documentation must contain 2 or 3 sections:\n' +
                self.ownedComment.body->any(true));
        id := self.name;
        name := '';
        description := doc->at(1);
        source := '';
        ocl := self.specification[OpaqueExpression].body->any(true).replace('\r\n', '\n');
        errorMessage := doc->at(2);
        successMessage := doc->at(3);
    }
}

///////////////////////////////////////////////////////////////////////////////
// Helpers

query OCLExpression::isForAll() : Boolean =
    self.oclIsKindOf(IteratorExp) and
    self![IteratorExp].referredIteration.name = 'forAll';

query OCLExpression::isLet() : Boolean =
    self.oclIsKindOf(LetExp);

// TODO: I think it doesn't support something like this:
// SomeClass.allInstances().prop
// Testing is needed.
query OCLExpression::isSupportedByXPath() : Boolean =
    if self.oclIsKindOf(OperationCallExp) then self![OperationCallExp]->forAll(
        referredOperation.name <> 'allInstances' and ownedSource.isSupportedByXPath() and ownedArguments->forAll(isSupportedByXPath()))
    elif self.oclIsKindOf(IteratorExp) then self![IteratorExp]->forAll(
        ownedSource.isSupportedByXPath() and ownedBody->forAll(isSupportedByXPath()))
    else true endif;
/*
query OCLExpression::getContext() : OCL::Variable;

query CallExp::getContext() : OCL::Variable =
    self.ownedSource.getContext();

query VariableExp::getContext() : OCL::Variable =
    self.referredVariable![OCL::Variable];
*/
query Classifier::getRootPath() : PathExpr =
    object PathExpr {
        step := object RootStepExpr { };
        step += object AbbrevForwardStep {
            kind := AbbrevForwardStepKind::child;
            nodeTest := object QNameTest { name := createQName('Document') };
        };
        step += object ChildStepExpr {
            step := object AbbrevForwardStep {
                kind := AbbrevForwardStepKind::child;
                nodeTest := object QNameTest { name := self.getQName() };
            };
        };
    };

query NamedElement::generateXMLTag() : String
{
    var name : String;
    if (self.is('MessageDefinition')) {
        name := self.getValue(profileName + '::MessageDefinition', 'xmlTag');
    }
    elif (self.is('MessageBuildingBlock')) {
        name := self.getValue(profileName + '::MessageBuildingBlock', 'xmlTag');
    }
    elif (self.is('MessageElement')) {
        name := self.getValue(profileName + '::MessageElement', 'xmlTag');
    }
    elif (self.isAttribute() and self![Property]._datatype.name = 'CurrencyAndAmount' and self.name = 'Currency') {
        name := 'Ccy';
    }
    else {
        name := self.name;
        if (name.lastIndexOf('.') > 0) {
            name := name.substring(1, name.lastIndexOf('.'));
        };
        name := name.replaceFirst('V\\d+$', '');
        // TODO http://www.iso20022.org/documents/general/XML_Tag_algorithm.pdf
    };

    assert fatal (name <> null and name.size() > 0) with log('For element ' + self.getNameWithStereotypes() + ' generated empty xmlTag');

    return name;
}

// TODO: OCLtoXPath must be refactored, transformations must receive context type or variable
// So in toPathExpr() the following code
//   self.referredProperty.owningClass.isDataType()
// will be replaced by
//   context.isDataType()
// and the following check will be unnecessary
//   self.getModel().name = 'ISO20022DataTypes'
query NamedElement::isSimpleType() : Boolean =
    self.is('Datatype') or self.is('CodeSet') or self.is('IdentifierSet') or
    self.getModel().name = 'ISO20022DataTypes';

///////////////////////////////////////////////////////////////////////////////
// Overrides

// TODO: OCLtoXPath uses both prefixed and unprefixed names. Something must be refactored.
query NamedElement::getQName() : TYPE::QName =
    self.getUnprefixedQName();
//    assert fatal (false) with log('NamedElement::getQName() must not be used');

query NamedElement::getUnprefixedQName() : TYPE::QName =
    createQName(self.generateXMLTag()).oclAsType(TYPE::QName);

query Element::is(stereotypeName : String) : Boolean = self.is(profileName, stereotypeName);

query NamedElement::isDataType() : Boolean =
    self.is('MessageDefinition') or self.is('MessageComponentType') or
    self.isSimpleType();

query NamedElement::isDateType() : Boolean =
    self[Classifier].general->one(name = 'Date');

query NamedElement::isDateTimeType() : Boolean =
    self[Classifier].general->one(name = 'DateTime');

query NamedElement::isTimeType() : Boolean =
    self[Classifier].general->one(name = 'Time');

query NamedElement::isDataElement() : Boolean = false;

query NamedElement::isAttribute() : Boolean =
    self[Property]->one(owner![Classifier].isSimpleType());
