/**
 * Copyright (c) 2013, 2015 Denis Nikiforov.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Denis Nikiforov - initial API and implementation
 */

import uml2xsd.UtilitiesLibrary;

library Helpers;

modeltype UML uses 'http://www.eclipse.org/uml2/2.1.0/UML';
modeltype TYPE uses 'http://www.eclipse.org/emf/2003/XMLType';

///////////////////////////////////////////////////////////////////////////////
// Strings

query isEmpty(str : String) : Boolean =
    str = null or str.oclIsInvalid() or str.size() = 0;

query notEmpty(str : String) : Boolean =
    not isEmpty(str);

query coalesce(arg1 : String, arg2 : String) : String =
    if notEmpty(arg1) then arg1 else arg2 endif;

query String::capitalize() : String =
    self.substring(1, 1).toUpper() + self.substring(2, self.size());

query Sequence(String)::sep(separator : String) : String =
    self->iterate(str; res : String = '' | if res = '' then str else res + separator + str endif);

query String::tokenize(delimiters : Set(String)) : Sequence(String) =
    self.tokenize(delimiters, false);

query String::tokenize(delimiters : Set(String), returnDelimiters : Boolean) : Sequence(String)
{
    var res : List(String);
    var pos := self.size();
    var delimiter : String;
    delimiters->forEach (delim) {
        var curPos := self.indexOf(delim);
        if (0 < curPos and curPos < pos) {
            pos := curPos;
            delimiter := delim;
        }
    };
    if (pos = self.size()) {
        res += self;
    }
    else {
        if (pos > 1) {
            res += self.substring(1, pos - 1);
        };
        if (returnDelimiters) {
            res += delimiter;
        };
        pos := pos + delimiter.size();
        if (pos < self.size()) {
            res += self.substring(pos, self.size()).tokenize(delimiters, returnDelimiters);
        };
    };
    return res;
}

query String::quote() : String = '\'' + self.replaceAll('\'', '\'\'') + '\'';

query String::toIdentifier() : String =
    self.replaceAll('[^A-Za-z0-9]', '_').replaceAll('^([^A-Za-z_])', '_$1');

query String::clean() : String =
    self.replaceAll('<p[^>]*>', '').replaceAll('</p>', '\n')
        .replaceAll('<br>', '\n')
        .replaceAll('<[^>]+>', '')
        .replaceAll('&nbsp;', ' ')
        .replaceAll('\r\n', '\n').replaceAll('\n', ' ')
        .replaceAll('\\s{2,}', ' ').trim();

query String::cleanML() : String =
    self.replaceAll('\r\n', '\n').replaceAll('\n{3,}', '\n\n')
        .replaceAll('[ ]{2,}', ' ').trim();

///////////////////////////////////////////////////////////////////////////////
// Stereotypes

query Element::is(profileName : String, stereotypeName : String) : Boolean =
    self.getAppliedStereotypes()->union(self.getAppliedStereotypes().allParents().oclAsType(Stereotype))
        ->select(owner.oclAsType(Profile).name = profileName)
        ->exists(name = stereotypeName);

query NamedElement::getNameWithStereotypes() : String =
    '<' + self.getAppliedStereotypes().name->sortedBy(str|str)->sep(',') + '> ' + self.name;

query Element::getValue(stereotypeQName : String, propertyName : String) : String =
  let stereotype : Stereotype = self.getAppliedStereotypes()->any(qualifiedName = stereotypeQName) in
  if stereotype = null then null else
    let value : String = self.getValue(stereotype, propertyName).oclAsType(String) in
    if value.size() > 0 then value else null endif
    endif;

///////////////////////////////////////////////////////////////////////////////
// Ecore

query NamedElement::getAnnotation(name : String) : String
{
    var annotations := self.ownedComment->select(eAnnotations->exists(source = name)).body;
    var count := annotations->size();
    if (count = 0) {
        assert fatal (false) with log('Required annotation ' + name + ' is not specified for ' + self.metaClassName() + ' "' + self.name + '"');
    }
    elif (count > 1) {
        assert fatal (false) with log('Multiple annotations ' + name + ' are specified for ' + self.metaClassName() + ' "' + self.name + '" while exactly one is required');
    };
    return annotations->any(true);
}

query NamedElement::getAnnotation(name : String, defaultValue : String) : String
{
    var annotations := self.ownedComment->select(eAnnotations->exists(source = name)).body;
    var count := annotations->size();
    if (count = 0) {
        return defaultValue;
    }
    elif (count > 1) {
        assert fatal (false) with log('Multiple annotations ' + name + ' are specified for ' + self.metaClassName() + ' " + self.name + " while at most one is required');
    };
    return annotations->any(true);
}

///////////////////////////////////////////////////////////////////////////////
// Abstract queries

abstract query NamedElement::getQName() : QName;

abstract query NamedElement::getUnprefixedQName() : QName;

abstract query NamedElement::isDataType() : Boolean;

abstract query NamedElement::isDateType() : Boolean;

abstract query NamedElement::isDateTimeType() : Boolean;

abstract query NamedElement::isTimeType() : Boolean;

abstract query NamedElement::isDurationType() : Boolean;

abstract query NamedElement::isDataElement() : Boolean;

abstract query NamedElement::isAttribute() : Boolean;
