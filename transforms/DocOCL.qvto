/**
 * Copyright (c) 2016 Denis Nikiforov.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Denis Nikiforov - initial API and implementation
 */

import uml2xsd.UtilitiesLibrary;
import Helpers;

transformation DocOCL;

intermediate class DocOCLToken { text : String; isExpr : Boolean };

query String::tokenizeDocOCL() : Sequence(DocOCLToken)
{
    var res : List(DocOCLToken);
    var itIsExpr := false;
    var pos := 1;
    self.tokenize(Set { '{{', '}}' }, true)->forEach (token) {
        switch {
            case (token = '{{') {
                assert fatal (not itIsExpr) with log('Unexpected {{ token at ' + pos.toString() + ' position in "' + self + '"');
                itIsExpr := true;
            }
            case (token = '}}') {
                assert fatal (itIsExpr) with log('Unexpected }} token at ' + pos.toString() + ' position in "' + self + '"');
                itIsExpr := false;
            }
            else res += object DocOCLToken {
                text := token;
                isExpr := itIsExpr;
            };
        };
        pos := pos + token.size();
    };
    return res;
}
