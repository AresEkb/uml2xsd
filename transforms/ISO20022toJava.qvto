/**
 * Copyright (c) 2015, 2016 Denis Nikiforov.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Denis Nikiforov - initial API and implementation
 */

import uml2xsd.UtilitiesLibrary;
import ISO20022Helpers;
import JavaHelpers;
import OCLtoXPath;
import DocOCL;

modeltype UML uses 'http://www.eclipse.org/uml2/2.1.0/UML';
modeltype OCL 'strict' uses 'http://www.eclipse.org/ocl/2015/Pivot';
modeltype JAVA uses 'http://www.emftext.org/java';
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype TYPE uses 'http://www.eclipse.org/emf/2003/XMLType';
modeltype XPATH2 'strict' uses 'http://www.emftext.org/language/xpath2';

transformation ISO20022toJava(in m : UML, out j : JAVA);

/**
 * Find all message definitions and map them to compilation units
 */
main()
{
    m.objectsOfKind(Classifier)->select(is('MessageDefinition'))->toCompilationUnit();
}

/**
 * Map a message definition to the following compilation unit:
 *
 * package com.centreit.repiso.validator.validation;
 *
 * import java.util.Arrays;
 * import java.util.List;
 * import javax.annotation.Generated;
 * import net.sf.saxon.s9api.XdmItem;
 * import com.centreit.repiso.validator.validation.BaseValidator;
 * import com.centreit.repiso.validator.validation.Helper;
 * import com.centreit.repiso.validator.validation.RuleMetadata;
 * import com.centreit.repiso.validator.validation.RuleResult;
 * import com.centreit.repiso.validator.validation.Variable;
 * import com.centreit.repiso.validator.validation.XPathParam;
 *
 * @Generated("uml2xsd")
 * public class {name} extends BaseValidator {
 *
 *     {validation methods}
 * }
 *
 */
mapping Classifier::toCompilationUnit() : JAVA::containers::CompilationUnit
{
    var className := self.name.toIdentifier();
    log('  Found message ' + self.name);

    name := self.name;
    namespaces := 'com.centreit.repiso.validator.validation'.tokenize('.');

    addClassImport(result, 'java.util.Arrays');
    addInterfaceImport(result, 'java.util.List');
    addAnnotationImport(result, 'javax.annotation.Generated');
    addInterfaceImport(result, 'net.sf.saxon.s9api.XdmItem');
    addClassImport(result, 'com.centreit.repiso.validator.validation.BaseValidator');
    addClassImport(result, 'com.centreit.repiso.validator.validation.Helper');
    addClassImport(result, 'com.centreit.repiso.validator.validation.RuleResult');
    addClassImport(result, 'com.centreit.repiso.validator.validation.RuleMetadata');
    addClassImport(result, 'com.centreit.repiso.validator.validation.Variable');
    addClassImport(result, 'com.centreit.repiso.validator.validation.XPathParam');

    classifiers := object JAVA::classifiers::Class {
        name := className;

        _extends := result.getClassReference('com.centreit.repiso.validator.validation.BaseValidator');

        annotationsAndModifiers += object JAVA::annotations::AnnotationInstance {
            annotation := result.getAnnotation('javax.annotation.Generated');
            parameter := object JAVA::annotations::SingleAnnotationParameter {
                value := object JAVA::_references::StringReference { value := 'uml2xsd'; };
            };
        };
        annotationsAndModifiers += object JAVA::modifiers::Public { };

        var rootField := object JAVA::members::Field {
            name := 'root';
            typeReference := result.getClassReference('net.sf.saxon.s9api.XdmItem');
            annotationsAndModifiers := object JAVA::modifiers::Private { };
        };

        members += self.ownedRule->sortedBy(name)->toValidationMethod(rootField);
    };
}

/**
 * Map OCL constraint to the following validation method:
 *
 *     @RuleMetadata(id = "{rule id}",
 *                   name= "{rule name}",
 *                   description = "{rule description}",
 *                   source = "{rule source}",
 *                   ocl = "{rule OCL}")
 *     public void check{rule id}(List<RuleResult> results) {
 *         {validation code}
 *     }
 *
 */
mapping Constraint::toValidationMethod(rootField : JAVA::members::Field) : JAVA::members::ClassMethod
{
    log('    Found rule ' + self.name);
    var rule := self.xmap toRule();
    name := 'check' + rule.id.toIdentifier().capitalize();

    annotationsAndModifiers += object JAVA::annotations::AnnotationInstance {
        annotation := result.getClass('com.centreit.repiso.validator.validation.RuleMetadata');
        parameter := object JAVA::annotations::AnnotationParameterList {
            settings += object JAVA::annotations::AnnotationAttributeSetting {
                attribute := object JAVA::members::InterfaceMethod { name := 'id' };
                value := object JAVA::_references::StringReference { value := rule.id };
            };
            if (notEmpty(rule.name)) {
                settings += object JAVA::annotations::AnnotationAttributeSetting {
                    attribute := object JAVA::members::InterfaceMethod { name := 'name' };
                    value := object JAVA::_references::StringReference { value := rule.name };
                };
            };
            if (notEmpty(rule.description)) {
                settings += object JAVA::annotations::AnnotationAttributeSetting {
                    attribute := object JAVA::members::InterfaceMethod { name := 'description' };
                    value := object JAVA::_references::StringReference { value := rule.description };
                };
            };
            if (notEmpty(rule.source)) {
                settings += object JAVA::annotations::AnnotationAttributeSetting {
                    attribute := object JAVA::members::InterfaceMethod { name := 'source' };
                    value := object JAVA::_references::StringReference { value := rule.source };
                };
            };
            settings += object JAVA::annotations::AnnotationAttributeSetting {
                attribute := object JAVA::members::InterfaceMethod { name := 'ocl' };
                value := object JAVA::_references::StringReference { value := rule.ocl };
            };
        };
    };
    annotationsAndModifiers += object JAVA::modifiers::Public { };

    var resultParam := object JAVA::parameters::OrdinaryParameter {
        name := 'results';
        typeReference := object JAVA::types::ClassifierReference {
            target := result.getInterface('java.util.List');
            typeArguments := object JAVA::generics::QualifiedTypeArgument {
                typeReference := result.getClassReference('com.centreit.repiso.validator.validation.RuleResult');
            };
        };
    };

    typeReference := object JAVA::types::Void { };
    parameters := resultParam;

    try {
        var variables : Dict(OCL::Variable, XPATH2::ExprSingle);
        var expr := self.toExpressionInOCL();
        assert fatal (not expr.ownedContext.oclIsInvalid());

        var variableName := '__' + expr.ownedContext.name.toIdentifier();
        variables->put(expr.ownedContext, object VarRef { varName := createQName(variableName) });

        var localVariables : List(JAVA::_references::ReferenceableElement);
        var selfVarStatement := object JAVA::statements::LocalVariableStatement {
            variable := object JAVA::variables::LocalVariable {
                name := variableName;
                typeReference := result.getClassReference('com.centreit.repiso.validator.validation.Variable');
                initialValue := object JAVA::_references::IdentifierReference {
                    target := object JAVA::classifiers::Class { name := 'Helper'; };
                    next := object JAVA::_references::MethodCall {
                        target := object JAVA::members::ClassMethod { name := 'variable'; };
                        arguments += object JAVA::_references::IdentifierReference {
                            target := rootField;
                        };
                        arguments += object JAVA::_references::StringReference {
                            value := variableName;
                        };
                    };
                };
            };
            localVariables->add(variable);
        };

        var validationStatements := self.xmap toValidationCode(expr.ownedBody, expr.ownedContext, expr.ownedContext, variables, rootField, resultParam, localVariables);

        statements += selfVarStatement;
        statements += validationStatements;
    }
    except () {
        log('WARNING: Unable to generate validation code');
    };
    // This code can't be moved into exception handling section, because it seems that sometimes exceptions aren't raised
    if (statements->isEmpty()) {
        statements += object JAVA::statements::Throw {
            throwable := object JAVA::instantiations::NewConstructorCall {
                typeReference := result.getClassReference('java.lang.UnsupportedOperationException');
            };
        };
    };
}

mapping Constraint::toValidationCode(
    expr : OCLExpression,
    root : OCL::Variable,
    context : OCL::Variable,
    variables : Dict(OCL::Variable, XPATH2::ExprSingle),
    contextVariable : JAVA::_references::ReferenceableElement,
    resultVariable : JAVA::_references::ReferenceableElement,
    localVariables : List(JAVA::_references::ReferenceableElement)) : List(JAVA::statements::Statement)
disjuncts
    Constraint::toLet,
    Constraint::toForAll,
    Constraint::toHelperCheckInvocation
{
}

/**
 * Map OCL constraint to the variable declaration:
 *
 *         Variable {variable name} = Helper.variable({context variable}, "{variable name}", "{variable init expression}");
 *         {validation code}
 */
mapping Constraint::toLet(
    expr : OCLExpression,
    root : OCL::Variable,
    context : OCL::Variable,
    variables : Dict(OCL::Variable, XPATH2::ExprSingle),
    contextVariable : JAVA::_references::ReferenceableElement,
    resultVariable : JAVA::_references::ReferenceableElement,
    localVariables : List(JAVA::_references::ReferenceableElement)) : List(JAVA::statements::Statement)
when { expr.isLet() }
{
    var variableExpr := expr![LetExp].ownedVariable;
    var variableName := variableExpr.name.toIdentifier();
    var variables2 : Dict(OCL::Variable, XPATH2::ExprSingle);
    variables->keys()->forEach (key) {
        variables2->put(key, variables->get(key));
    };
    variables2->put(variableExpr, object VarRef { varName := createQName(variableName) });
    var localVariables2 := localVariables;
    result += object JAVA::statements::LocalVariableStatement {
        variable := object JAVA::variables::LocalVariable {
            name := '__' + variableName;
            typeReference := contextVariable.getClassReference('com.centreit.repiso.validator.validation.Variable');
            initialValue := object JAVA::_references::IdentifierReference {
                target := object JAVA::classifiers::Class { name := 'Helper'; };
                next := object JAVA::_references::MethodCall {
                    target := object JAVA::members::ClassMethod { name := 'variable'; };
                    arguments += object JAVA::_references::IdentifierReference {
                        target := contextVariable;
                    };
                    arguments += object JAVA::_references::StringReference {
                        value := variableName;
                    };
                    arguments += object JAVA::_references::StringReference {
                        value := variableExpr.ownedInit.xmap toExprSingle(variables).toString();
                    };
                };
            };
        };
        localVariables2->add(variable);
    };
    result += self.xmap toValidationCode(expr![LetExp].ownedIn, root, context, variables2, contextVariable, resultVariable, localVariables2);
}

/**
 * Map OCL constraint to the loop:
 *
 *         for (XdmItem context : Helper.iterate(root, "{path}")) {
 *             {validation code}
 *         }
 */
mapping Constraint::toForAll(
    expr : OCLExpression,
    root : OCL::Variable,
    context : OCL::Variable,
    variables : Dict(OCL::Variable, XPATH2::ExprSingle),
    contextVariable : JAVA::_references::ReferenceableElement,
    resultVariable : JAVA::_references::ReferenceableElement,
    localVariables : List(JAVA::_references::ReferenceableElement)) : List(JAVA::statements::Statement)
when { expr.isForAll() }
{
    var contextExpr := expr![IteratorExp].ownedSource;
    result += object JAVA::statements::ForEachLoop {
        var contextParam := object JAVA::parameters::OrdinaryParameter {
            name := 'context';
            typeReference := object JAVA::types::ClassifierReference {
                target := contextVariable.getInterface('net.sf.saxon.s9api.XdmItem');
            };
        };
        next := contextParam;
        collection := object JAVA::_references::IdentifierReference {
            target := object JAVA::classifiers::Class { name := 'Helper'; };
            next := object JAVA::_references::MethodCall {
                target := object JAVA::members::ClassMethod { name := 'iterate'; };
                arguments := object JAVA::_references::IdentifierReference {
                    target := contextVariable;
                };
                arguments += object JAVA::_references::StringReference {
                    //var variables : Dict(OCL::Variable, XPATH2::ExprSingle);
                    //log('=== from ' + contextExpr.toString());
                    var variables2 : Dict(OCL::Variable, XPATH2::ExprSingle);
                    variables->keys()->forEach (key) {
                        variables2->put(key, variables->get(key));
                    };
                    variables2->put(root, object PathExpr {
                        step := object RootStepExpr { };
                        step += object SelfStepExpr {
                            step := object AbbrevForwardStep {
                                kind := AbbrevForwardStepKind::child;
                                nodeTest := object QNameTest { name := root.type.getQName() };
                            };
                        };
                    });
                    value := contextExpr.xmap toExprSingle(variables2).toString();
                    //log('=== to   ' + value);
                };
            };
        };
        statement := object JAVA::statements::Block {
            // TODO: This must be refactored. Java variables must be mapped to XPath ones
            /*var nestingLevelsCount := contextExpr.countNestingLevels();
            if (nestingLevelsCount > 0) {
                var path := object PathExpr {
                    step := object SelfStepExpr {
                        step := object AbbrevReverseStep { kind := AbbrevReverseStepKind::parent }
                    };
                    step += Sequence{1..nestingLevelsCount - 1}->collect(
                        object ChildStepExpr {
                            step := object AbbrevReverseStep { kind := AbbrevReverseStepKind::parent }
                        });
                };
                variables2->put(expr.getContext(), path);
            };*/
            // TODO: Refactor it and emptySelf
            // Relative path is better because of non-determenistic Document root, which is sometimes present, sometimes absent
            assert fatal (expr![IteratorExp].ownedIterators->size() = 1);
            var iterator := expr![IteratorExp].ownedIterators->first();
            var variableName := iterator.name.toIdentifier();
            var variables2 : Dict(OCL::Variable, XPATH2::ExprSingle);
            variables->keys()->forEach (key) {
                variables2->put(key, variables->get(key));
            };
            variables2->put(iterator, object VarRef { varName := createQName(variableName) });

            var localVariables2 := localVariables;
            statements += object JAVA::statements::LocalVariableStatement {
                variable := object JAVA::variables::LocalVariable {
                    name := '__' + variableName;
                    typeReference := contextVariable.getClassReference('com.centreit.repiso.validator.validation.Variable');
                    initialValue := object JAVA::_references::IdentifierReference {
                        target := object JAVA::classifiers::Class { name := 'Helper'; };
                        next := object JAVA::_references::MethodCall {
                            target := object JAVA::members::ClassMethod { name := 'variable'; };
                            arguments += object JAVA::_references::IdentifierReference {
                                target := contextParam;
                            };
                            arguments += object JAVA::_references::StringReference {
                                value := variableName;
                            };
                        };
                    };
                };
                localVariables2->add(variable);
            };

            statements += self.xmap toValidationCode(expr![IteratorExp].ownedBody, root, iterator, variables2, contextParam, resultVariable, localVariables);
        };
    };
}

/**
 * Map OCL constraint to the invocation of Helper.check():
 *
 *         result.add(Helper.check(
 *             context,
 *             "{rule XPath expression}",
 *             Arrays.asList({variables list}),
 *             "{error message}",
 *             "{success message}"));
 */
mapping Constraint::toHelperCheckInvocation(
    expr : OCLExpression,
    root : OCL::Variable,
    context : OCL::Variable,
    variables : Dict(OCL::Variable, XPATH2::ExprSingle),
    contextVariable : JAVA::_references::ReferenceableElement,
    resultVariable : JAVA::_references::ReferenceableElement,
    localVariables : List(JAVA::_references::ReferenceableElement)) : List(JAVA::statements::Statement)
{
    result += object JAVA::statements::ExpressionStatement {
        expression := object JAVA::expressions::AssignmentExpression {
            child := object JAVA::_references::IdentifierReference {
                target := resultVariable;
                next := object JAVA::_references::MethodCall {
                    target := object JAVA::members::ClassMethod { name := 'add'; };
                    arguments := object JAVA::_references::IdentifierReference {
                        target := object JAVA::classifiers::Class { name := 'Helper'; };
                        next := object JAVA::_references::MethodCall {
                            target := object JAVA::members::ClassMethod { name := 'check'; };

                            arguments := object JAVA::_references::IdentifierReference {
                                target := contextVariable;
                            };

                            var expr2 := expr.replaceLocal();
                            arguments += object JAVA::_references::StringReference {
                                value := expr2.xmap toExprSingle(variables).toString()
                                    .replaceAll("'(:param\\d+)'", "$1")
                                    .replaceAll("'(:param\\d+)'", "$1"); // TODO: There is a strange bug, param is quoted twice
                            };

                            arguments += object JAVA::_references::IdentifierReference {
                                target := contextVariable.getClass('java.util.Arrays');
                                next := object JAVA::_references::MethodCall {
                                    target := object JAVA::members::ClassMethod { name := 'asList' };
                                    arguments := localVariables->collect(v|
                                        object JAVA::_references::IdentifierReference {
                                            target := v;
                                        });
                                };
                            };

                            arguments += object JAVA::_references::IdentifierReference {
                                target := object JAVA::classifiers::Class { name := 'Arrays'; };
                                next := object JAVA::_references::MethodCall {
                                    target := object JAVA::members::ClassMethod {
                                        name := 'asList';
                                    };
                                    arguments := expr2.resolveIn(OCLExpression::toParam, Param)->sortedBy(name)->toNewConstructorCall(variables);
                                };
                            };

                            var rule := self.xmap toRule();
                            arguments += rule.errorMessage.toMessage(contextVariable, context.type, variables);
                            if (notEmpty(rule.successMessage)) {
                                arguments += rule.successMessage.toMessage(contextVariable, context.type, variables);
                            };
                        };
                    };
                };
            };
        };
    };
}

mapping Param::toNewConstructorCall(variables : Dict(OCL::Variable, XPATH2::ExprSingle)) : JAVA::instantiations::NewConstructorCall
{
    typeReference := object JAVA::types::ClassifierReference {
        target := object JAVA::classifiers::Class {
            name := 'XPathParam';
        };
    };
    arguments := object JAVA::_references::StringReference {
        value := self.name;
    };
    arguments += object JAVA::_references::StringReference {
        value := self.ocl.xmap toExprSingle(variables).toString();
    };
    arguments += object JAVA::_references::IdentifierReference {
        target := object JAVA::classifiers::Class {
            name := self.ocl.getType();
        };
        next := object JAVA::_references::ReflectiveClassReference { };
    };
}

///////////////////////////////////////////////////////////////////////////////
// Helpers

/**
 * Convert string of the form
 *   Some text {{ocl expression 1}}, more text {{ocl expression 2}}...
 * to
 *   Helper.format(context, "Some text %s, more text %s...", "{XPath expression 1}", ...),
 */
query String::toMessage(
    contextVariable : JAVA::_references::ReferenceableElement,
    context : OCL::Type,
    variables : Dict(OCL::Variable, XPATH2::ExprSingle)) : JAVA::_references::IdentifierReference
{
    var str := '';
    var args : List(String);
    self.tokenizeDocOCL()->forEach (token) {
        if (token.isExpr) {
            str := str + '%s';
            args += token.text.toExpressionInOCL(context).ownedBody.xmap toExprSingle(variables).toString();
        }
        else {
            str := str + token.text;
        };
    };

    return object JAVA::_references::IdentifierReference {
        target := contextVariable.getClass('com.centreit.repiso.validator.validation.Helper');
        next := object JAVA::_references::MethodCall {
            target := object JAVA::members::ClassMethod { name := 'format'; };
            arguments := object JAVA::_references::IdentifierReference {
                target := contextVariable;
            };
            arguments += object JAVA::_references::StringReference {
                value := str;
            };
            args->forEach (arg) {
                arguments += object JAVA::_references::StringReference {
                    value := arg;
                };
            };
        };
    };
}

/**
 * Check whether each expression in OCL AST is local or external.
 * Here is an example of the external expression:
 *   SomeType.allInstances()->exists(externalVariable | ...)
 * Local expressions are just copied without modifications.
 * Within external expressions all references to local variables (e.g., self) are replaced by :paramN
 */

query OCLExpression::replaceLocal() : OCLExpression = self.replaceLocal(self);

query OCLExpression::replaceLocal(expr : OCLExpression) : OCLExpression = self.deepclone();

query OperationCallExp::replaceLocal(expr : OCLExpression) : OCLExpression
{
    var op := self.clone();
    object op : OperationCallExp {
        ownedSource := self.ownedSource.replaceLocal(expr);
        ownedArguments := self.ownedArguments->replaceLocal(expr);
    };
    return op;
}

query IteratorExp::replaceLocal(expr : OCLExpression) : OCLExpression
{
    if (self.isExternal()) {
        var it := self.clone();
        object it : IteratorExp {
            assert fatal (self.ownedIterators->size() = 1);
            ownedSource := self.ownedSource.replaceLocal(expr);
            ownedIterators := self.ownedIterators.deepclone();
            ownedBody := self.ownedBody.replaceLocal(expr, self.ownedIterators->first());
        };
        return it;
    };
    return self.deepclone();
}

/**
 * Replace all local expressions (expressions which aren't based on externalVariable) by :paramN
 */

query OCLExpression::replaceLocal(expr : OCLExpression, externalVariable : OCL::Variable) : OCLExpression =
    assert fatal (false) with log('Not implemented for ' + self.metaClassName() + ' (' + self.repr() + ')');

query LiteralExp::replaceLocal(expr : OCLExpression, externalVariable : OCL::Variable) : OCLExpression = self.deepclone();

query PropertyCallExp::replaceLocal(expr : OCLExpression, externalVariable : OCL::Variable) : OCLExpression =
    if self.isLocalExpression(externalVariable)
    then expr.xmap toParam(self).symbol
    else self.deepclone() endif;

query OperationCallExp::replaceLocal(expr : OCLExpression, externalVariable : OCL::Variable) : OCLExpression
{
    if (self.isLocalExpression(externalVariable)) {
        return expr.xmap toParam(self).symbol;
    };
    var op := self.clone();
    object op : OperationCallExp {
        ownedSource := self.ownedSource.replaceLocal(expr, externalVariable);
        ownedArguments := self.ownedArguments->replaceLocal(expr, externalVariable);
    };
    return op;
}

/**
 * Check whether expression is based on a variable, which differs from externalVariable (e.g., self).
 */

query OCLExpression::isLocalExpression(externalVariable : OCL::Variable) : Boolean =
    assert fatal (false) with log('Not implemented for ' + self.metaClassName() + ' (' + self.repr() + ')');

query LiteralExp::isLocalExpression(externalVariable : OCL::Variable) : Boolean = false;

query VariableExp::isLocalExpression(externalVariable : OCL::Variable) : Boolean =
    self.referredVariable <> externalVariable;

query PropertyCallExp::isLocalExpression(externalVariable : OCL::Variable) : Boolean =
    self.ownedSource.isLocalExpression(externalVariable);

query OperationCallExp::isLocalExpression(externalVariable : OCL::Variable) : Boolean =
    self.ownedSource.isLocalExpression(externalVariable) and
    self.ownedArguments->forAll(isLocalExpression(externalVariable));

/**
 * Store param in QVTo trace
 */

intermediate class Param
{
    name : String;
    ocl : OCLExpression;
    symbol : StringLiteralExp;
};

mapping OCLExpression::toParam(expression : OCLExpression) : Param
{
    //''.getStrCounter('');
    var id := 'param' + getSeqNumber().toString();
    name := id;
    ocl := expression;
    symbol := object StringLiteralExp {
        stringSymbol := ':' + id;
    };
}

/**
 * Determine OCL expression' type
 */

query OCL::TypedElement::getType() : String = self.type.getType();

query OCL::Type::getType() : String
{
    // TODO: Something more adequate is needed here
    if (self.name = 'Integer') {
        return 'Integer';
    }
    elif (self.oclIsKindOf(OCL::NamedElement)) {
        if (self.oclAsType(OCL::NamedElement).getETarget().is('String')) {
            return 'String';
        };
    };
    assert fatal (false) with log('Unable to determine type of ' + self.repr());
    return null; // HACK
}
