/**
 * Copyright (c) 2013, 2014 Denis Nikiforov.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    Denis Nikiforov - initial API and implementation
 */

import uml2xsd.UtilLib;
import OCLtoXPath;

modeltype UML uses 'http://www.eclipse.org/uml2/2.1.0/UML';
modeltype OCL 'strict' uses 'http://www.eclipse.org/ocl/2015/Pivot';
modeltype XSD uses 'http://www.w3.org/2001/XMLSchema';
modeltype VC uses 'http://www.w3.org/2007/XMLSchema-versioning';
modeltype XPATH2 'strict' uses 'http://www.emftext.org/language/xpath2';
modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype TYPE uses 'http://www.eclipse.org/emf/2003/XMLType';

transformation GetXPath(in m : UML, out x : XPATH2);

main()
{
    m.objectsOfType(Package)->select(isNamespace() and not(isXMLPT()))->toSchema();
}

mapping Package::toSchema() : Expr
{
    log("  Found namespace " + self.getTargetNS());
    self.allSubobjects()[DataType].ownedOCLRule().xmap toXPath();
}

///////////////////////////////////////////////////////////////////////////////
// Helpers

query Package::isXMLPT() : Boolean =
    self.getTargetNS() = 'http://www.w3.org/2001/XMLSchema';

query Package::isNamespace() : Boolean =
    self.getAppliedStereotype('EECProfile::Namespace') <> null;
